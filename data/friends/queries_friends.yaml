constraints:
  - |
    CREATE CONSTRAINT person_unique IF NOT EXISTS
    FOR (p:Person) REQUIRE p.uuid IS UNIQUE
  - |
    CREATE CONSTRAINT company_unique IF NOT EXISTS
    FOR (c:Company) REQUIRE c.uuid IS UNIQUE

create_seed : |
    CREATE (a:Person {name:'Iria', age:27, gender: 'female', education:'Physics', uuid:randomUUID()})
    CREATE (b:Person {name:'Guillermo', age:26, gender: 'male', education:'Industrial Engineering', uuid:randomUUID()})
    CREATE (c:Person {name:'Gabriela', age:26, gender: 'female',education:'Physics', uuid:randomUUID()})
    CREATE (d:Person {name:'Paula', age:25, gender: 'female', education:'Computer Engineering', uuid:randomUUID()})
    CREATE (e:Person {name:'Cristina', age:27, gender: 'female', education:'Physics', uuid:randomUUID()})
    CREATE (f:Person {name:'Daniel', age:27, gender: 'male', education:'Arts', uuid:randomUUID()})
    CREATE (g:Person {name:'Javier', age:27, gender: 'male', education:'Physics', uuid:randomUUID()})
    CREATE (h:Person {name:'Juan', age:27, gender: 'male', education:'Physics', uuid:randomUUID()})
    CREATE (i:Person {name:'Elias', age:29, gender: 'male', education:'Physics', uuid:randomUUID()})
    CREATE (j:Person {name:'Iciar', age:26, gender: 'female', education:'Physics', uuid:randomUUID()})
    CREATE (k:Person {name:'Adrián', age:27, gender: 'male', education:'Physics', uuid:randomUUID()})

    CREATE (indra:Company {name:'Indra', industry:'Engineering', uuid:randomUUID()})
    CREATE (ciemat:Company {name:'CIEMAT', industry:'Scientific Research', uuid:randomUUID()})
    CREATE (cbm:Company {name:'CBM', industry:'Scientific Research', uuid:randomUUID()})
    CREATE (instagram:Company {name:'Instagram', industry:'Social Media', uuid:randomUUID()})
    CREATE (getronics:Company {name:'Getronics', industry:'Consulting Services', uuid:randomUUID()})
    CREATE (accenture:Company {name:'Accenture', industry:'Consulting Services', uuid:randomUUID()})


    CREATE (a)-[:KNOWS {knows_from:'work', text: 'Guillermo and Iria work together in the same project with AI Agents.', uuid:randomUUID()}]->(b)
    CREATE (a)-[:KNOWS {knows_from:'university', text: 'Iria and Gabriela now each other because they went to University together and liked going camping.', uuid:randomUUID() }]->(c)
    CREATE (a)-[:KNOWS {knows_from:'work', text: 'Paula is helping Iria with the project she is working on.', uuid:randomUUID()}]->(d)
    CREATE (a)-[:KNOWS {knows_from:'university', text: 'Cristina was Iria best friend in University, now they see each other every weekend.', uuid:randomUUID()}]->(e)
    CREATE (a)-[:KNOWS {knows_from:'university', text: 'University friends.', uuid:randomUUID()}]->(g)
    CREATE (a)-[:KNOWS {knows_from:'university', text: 'University friends.', uuid:randomUUID()}]->(h)
    CREATE (a)-[:KNOWS {knows_from:'university', text: 'University friends.', uuid:randomUUID()}]->(i)
    CREATE (a)-[:KNOWS {knows_from:'university', text: 'University friends.', uuid:randomUUID()}]->(j)
    CREATE (a)-[:KNOWS {knows_from:'university', text: 'University friends.', uuid:randomUUID()}]->(k)
    CREATE (b)-[:KNOWS {knows_from:'work', text: 'Paula is helping Guillermo with the project he is working on.', uuid:randomUUID()}]->(d)
    CREATE (c)-[:KNOWS {knows_from:'university', text: 'Cristina and Gabriela go to Chinese academy together, although they met at uni.', uuid:randomUUID()}]->(e)
    CREATE (c)-[:KNOWS {knows_from:'university', text: 'University friends.', uuid:randomUUID()}]->(g)
    CREATE (c)-[:KNOWS {knows_from:'university', text: 'University friends.', uuid:randomUUID()}]->(h)
    CREATE (c)-[:KNOWS {knows_from:'university', text: 'University friends.', uuid:randomUUID()}]->(i)
    CREATE (c)-[:KNOWS {knows_from:'university', text: 'University friends.', uuid:randomUUID()}]->(j)
    CREATE (c)-[:KNOWS {knows_from:'university', text: 'University friends.', uuid:randomUUID()}]->(k)
    CREATE (e)-[:KNOWS {knows_from:'school', text: 'Cristina and Daniel are in a relaitonship.', uuid:randomUUID()}]->(f)
    CREATE (e)-[:KNOWS {knows_from:'university', text: 'University friends.', uuid:randomUUID()}]->(g)
    CREATE (e)-[:KNOWS {knows_from:'university', text: 'University friends.', uuid:randomUUID()}]->(h)
    CREATE (e)-[:KNOWS {knows_from:'university', text: 'University friends.', uuid:randomUUID()}]->(i)
    CREATE (e)-[:KNOWS {knows_from:'university', text: 'University friends.', uuid:randomUUID()}]->(j)
    CREATE (e)-[:KNOWS {knows_from:'university', text: 'University friends.', uuid:randomUUID()}]->(k)
    CREATE (g)-[:KNOWS {knows_from:'university', text: 'University friends.', uuid:randomUUID()}]->(h)
    CREATE (g)-[:KNOWS {knows_from:'university', text: 'University friends.', uuid:randomUUID()}]->(i)
    CREATE (g)-[:KNOWS {knows_from:'university', text: 'University friends.', uuid:randomUUID()}]->(j)
    CREATE (g)-[:KNOWS {knows_from:'university', text: 'University friends.', uuid:randomUUID()}]->(k)
    CREATE (h)-[:KNOWS {knows_from:'university', text: 'University friends.', uuid:randomUUID()}]->(i)
    CREATE (h)-[:KNOWS {knows_from:'university', text: 'University friends.', uuid:randomUUID()}]->(j)
    CREATE (h)-[:KNOWS {knows_from:'university', text: 'University friends.', uuid:randomUUID()}]->(k)
    CREATE (i)-[:KNOWS {knows_from:'university', text: 'University friends.', uuid:randomUUID()}]->(j)
    CREATE (i)-[:KNOWS {knows_from:'university', text: 'University friends.', uuid:randomUUID()}]->(k)
    CREATE (j)-[:KNOWS {knows_from:'university', text: 'University friends.', uuid:randomUUID()}]->(k)

    CREATE (a)-[:WORKS_AT {since:2025}]->(indra)
    CREATE (b)-[:WORKS_AT {since:2023}]->(indra)
    CREATE (c)-[:WORKS_AT {since:2023}]->(ciemat)
    CREATE (d)-[:WORKS_AT {since:2024}]->(indra)
    CREATE (e)-[:WORKS_AT {since:2025}]->(cbm)
    CREATE (f)-[:WORKS_AT {since:2025}]->(instagram)
    CREATE (g)-[:WORKS_AT {since:2023}]->(indra)
    CREATE (h)-[:WORKS_AT {since:2023}]->(getronics)
    CREATE (i)-[:WORKS_AT {since:2024}]->(accenture)
    CREATE (j)-[:WORKS_AT {since:2025}]->(accenture)
    CREATE (k)-[:WORKS_AT {since:2023}]->(indra)

    
show_people : |
    MATCH (p:Person) 
    RETURN p.name as name, p.age as age, p.gender, p.education as education
    ORDER BY age

show_companies : |
    MATCH (c:Company) 
    RETURN c.name as name, c.industry as industry
    ORDER BY industry

match_adjacency : |
    MATCH (a:Person)-[:KNOWS]-(b:Person), (a)-[:WORKS_AT]->(c:Company)
    RETURN a.name AS person, collect(b.name) AS knows, c.name AS works_at
    ORDER BY person

show_text : |
    MATCH (n) 
    RETURN labels(n), n.name, n.text

show_locations : |
    MATCH (n)
    RETURN n.name AS name, labels(n) AS labels,
        n.location.latitude AS lat, 
        n.location.longitude AS lon

show_distances : |
    MATCH (p:Person {name:"Iria"}), (other:Person)
    WITH p, other, point.distance(p.location, other.location) AS distance_m
    RETURN p.name, other.name, round(distance_m/1000, 2) + " km" AS distance_km

add_text :

    - |
        MATCH (p:Person {name:"Iria"})
        SET p.text = p.name + " is a " + p.gender + " of " + toString(p.age) + " years old and studied " + p.education + "." + "Iria has blue eyes and long brunette and wavy hair. She likes to paint her nails in red or purple colours. She usually wears long earrings."
    - |
        MATCH (p:Person {name:"Guillermo"})
        SET p.text = p.name + " is a " + p.gender + " of " + toString(p.age) + " years old and studied " + p.education + "." + "Guillermo has brown eyes and short hair. He has a very fancy shirt that he takes to all important events. He shaved his head this summer."
    - |
        MATCH (p:Person {name:"Gabriela"})
        SET p.text = p.name + " is a " + p.gender + " of " + toString(p.age) + " years old and studied " + p.education + "." + "Gabriela has long curly hair with babylights. She's petite and likes to wear hippie-style clothes."
    - |
        MATCH (p:Person {name:"Paula"})
        SET p.text = p.name + " is a " + p.gender + " of " + toString(p.age) + " years old and studied " + p.education + "." + "Paula short hair in a wolfcut style. She wears long and wide pants and sneakers to the laboratory."
    - |
        MATCH (p:Person {name:"Cristina"})
        SET p.text = p.name + " is a " + p.gender + " of " + toString(p.age) + " years old and studied " + p.education + "." + "Cristina has brown eyes and very long straight brunette hair. She usually wears scarfs to style her hair and long skirts. "
    - |
        MATCH (p:Person {name:"Daniel"})
        SET p.text = p.name + " is a " + p.gender + " of " + toString(p.age) + " years old and studied " + p.education + "." + "Daniel has short curly hair. He loves horror movies. "
    - |
        MATCH (p:Person {name:"Javier"})
        SET p.text = p.name + " is a " + p.gender + " of " + toString(p.age) + " years old and studied " + p.education + "."
    - |
        MATCH (p:Person {name:"Juan"})
        SET p.text = p.name + " is a " + p.gender + " of " + toString(p.age) + " years old and studied " + p.education + "."
    - |
        MATCH (p:Person {name:"Elias"})
        SET p.text = p.name + " is a " + p.gender + " of " + toString(p.age) + " years old and studied " + p.education + "."
    - |
        MATCH (p:Person {name:"Iciar"})
        SET p.text = p.name + " is a " + p.gender + " of " + toString(p.age) + " years old and studied " + p.education + "."
    - |
        MATCH (p:Person {name:"Adrián"})
        SET p.text = p.name + " is a " + p.gender + " of " + toString(p.age) + " years old and studied " + p.education + "."

    
    - |
        MATCH (c:Company {name:"Indra"})
        SET c.text = c.name + " operates in the " + c.industry + " industry." + "Indra Group is a holding company that promotes technological progress. It includes Indra, one of the main global defense, air traffic and space companies; and Minsait, leading digital transformation and information technologies in Spain and Latin America. "
    - |
        MATCH (c:Company {name:"CIEMAT"})
        SET c.text = c.name + " operates in the " + c.industry + " industry." + "The CIEMAT (Centro de Investigaciones Energéticas, Medioambientales y Tecnológicas) is a public research organization attached to the Ministry of Science, Innovation and Universities through the General Secretariat for Research. It occupies an intermediate position in the chain that runs from the creation of basic knowledge to industrial application, so its activities always seek to serve as a bridge between R&D&I and objectives of social interest."
    - |
        MATCH (c:Company {name:"CBM"})
        SET c.text = c.name + " operates in the " + c.industry + " industry." + "The CBM is a joint research centre, hosting researchers belonging to the Spanish Higher Research Council (CSIC) and the Universidad Autónoma de Madrid (UAM). Founded in 1975, the CBM is one of the largest Spanish multidisciplinary research centres in biomedicine, with expertise in molecular biology, biochemistry, genetics and genomics in several research areas: immunology, virology and microbiology, neuroscience, and cell and developmental biology."
    - |
        MATCH (c:Company {name:"Instagram"})
        SET c.text = c.name + " operates in the " + c.industry + " industry." + "Instagram is a free mobile app for photo and short-form video sharing, owned by Meta, where users can upload media, edit it with filters, add hashtags, and tag locations. The platform allows users to share content with followers, engage with posts through likes and comments, and discover new content through personalized recommendations."
    - |
        MATCH (c:Company {name:"Accenture"})
        SET c.text = c.name + " operates in the " + c.industry + " industry." 
    - |
        MATCH (c:Company {name:"Getronics"})
        SET c.text = c.name + " operates in the " + c.industry + " industry." 


add_locations :

    - |
        MATCH (p:Person {name:"Iria"})
        SET p.location = point({latitude: 40.433600, longitude: -3.711223})
    - |
        MATCH (p:Person {name:"Guillermo"})
        SET p.location = point({latitude: 40.455022, longitude: -3.692355})
    - |
        MATCH (p:Person {name:"Gabriela"})
        SET p.location = point({latitude: 40.432800, longitude: -3.711451})
    - |
        MATCH (p:Person {name:"Paula"})
        SET p.location = point({latitude: 40.490170, longitude: -3.654654})
    - |
        MATCH (p:Person {name:"Cristina"})
        SET p.location = point({latitude: 40.433200, longitude: -3.597745})
    - |
        MATCH (p:Person {name:"Daniel"})
        SET p.location = point({latitude: 40.433600, longitude: -3.617745})
    - |
        MATCH (p:Person {name:"Javier"})
        SET p.location = point({latitude: 40.434000, longitude: -3.711223})

    - |
        MATCH (p:Person {name:"Juan"})
        SET p.location = point({latitude: 40.434400, longitude: -3.711223})

    - |
        MATCH (p:Person {name:"Elias"})
        SET p.location = point({latitude: 40.434800, longitude: -3.711223})

    - |
        MATCH (p:Person {name:"Iciar"})
        SET p.location = point({latitude: 40.435200, longitude: -3.711223})
    - |
        MATCH (p:Person {name:"Adrián"})
        SET p.location = point({latitude: 40.435600, longitude: -3.711223})

    
    - |
        MATCH (c:Company {name:"Indra"})
        SET c.location = point({latitude: 40.533873, longitude: -3.630539})
    - |
        MATCH (c:Company {name:"CIEMAT"})
        SET c.location = point({latitude: 40.453938, longitude: -3.728925})
    - |
        MATCH (c:Company {name:"CBM"})
        SET c.location = point({latitude: 40.549613, longitude: -3.690136})
    - |
        MATCH (c:Company {name:"Instagram"})
        SET c.location = point({latitude: 40.652321, longitude: -3.701249})
    - |
        MATCH (c:Company {name:"Accenture"})
        SET c.location = point({latitude: 40.651321, longitude: -3.801249})
    - |
        MATCH (c:Company {name:"Getronics"})
        SET c.location = point({latitude: 40.352321, longitude: -3.801249})


create_vector_indexes:
    - |
        CREATE VECTOR INDEX person_node_idx IF NOT EXISTS
        FOR (n:Person) ON (n.embedding)
        OPTIONS { indexConfig: { `vector.dimensions`: 768, `vector.similarity_function`: 'cosine' } }
    - |
        CREATE VECTOR INDEX company_node_idx IF NOT EXISTS
        FOR (n:Company) ON (n.embedding)
        OPTIONS { indexConfig: { `vector.dimensions`: 768, `vector.similarity_function`: 'cosine' } }

    - |
        CREATE VECTOR INDEX know_relationship_idx IF NOT EXISTS
        FOR ()-[r:KNOWS]-() ON (r.embedding)
        OPTIONS { indexConfig: { `vector.dimensions`: 768, `vector.similarity_function`: 'cosine' } }

delete_all : 

    - |
        MATCH (n) DETACH DELETE n
    - |
        DROP INDEX person_node_idx IF EXISTS
    - |
        DROP INDEX company_node_idx IF EXISTS
    - |
        DROP INDEX know_relationship_idx IF EXISTS

# querys to reuse
create_person : |
    CREATE (p:Person {
        name:$person_name, 
        age:$person_age, 
        gender: $person_gender, 
        education:$person_education, 
        text : $person_name + " is a " + $person_age + " of " + toString($person_gender) + " years old and studied " + $person_education + "." + $person_extra_text,
        location : point({latitude: $person_latitude, longitude: $person_longitude}),
        uuid:randomUUID()
        })

create_company : |
    CREATE (c:Company {
        name:$company_name, 
        industry:$company_industry, 
        text : $company_name + " operates in the " + $company_industry + " industry." + $company_extra_text,
        location : point({latitude: $company_latitude, longitude: $company_longitude}),
        uuid:randomUUID()
        })

create_person_company_relation: |
    MATCH (p:Person {name: $person_name})
    MATCH (c:Company {name: $company_name})
    MERGE (p)-[r:WORKS_AT]->(c)
    ON CREATE SET r.since = coalesce($since, date()), r.uuid = randomUUID()
    RETURN p, r, c

create_person_person_relation: |
    MATCH (p1:Person {name: $start_person})
    MATCH (p2:Person {name: $end_person})
    MERGE (p1)-[r:KNOWS]->(p2)
    ON CREATE SET r.knows_from = coalesce($knows_from, "unknown"), r.text = $relation_text, r.uuid = randomUUID()
    RETURN p1, r, p2

create_vector_index_nodes : |
        CREATE VECTOR INDEX $index_name IF NOT EXISTS
        FOR (n:$node_label) ON (n.embedding)
        OPTIONS { indexConfig: { `vector.dimensions`: 768, `vector.similarity_function`: 'cosine' } }
        
create_vector_index_relations : |
        CREATE VECTOR INDEX $index_name IF NOT EXISTS
        FOR ()-[r:$relation_type]-() ON (n.embedding)
        OPTIONS { indexConfig: { `vector.dimensions`: 768, `vector.similarity_function`: 'cosine' } }